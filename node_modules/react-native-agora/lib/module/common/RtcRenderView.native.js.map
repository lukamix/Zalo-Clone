{"version":3,"sources":["RtcRenderView.native.tsx"],"names":["React","Component","requireNativeComponent","RCTRtcSurfaceView","RtcSurfaceView","render","channelId","uid","others","props","RCTRtcTextureView","RtcTextureView"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,sBAAT,QAAkD,cAAlD;;AA6EA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAGD,sBAAsB,CAC9C,wBAD8C,CAAhD;AAIA;AACA;AACA;;AACA,OAAO,MAAME,cAAN,SAA6BH,SAA7B,CAGL;AACAI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,GAAb;AAAkB,SAAGC;AAArB,QAAgC,KAAKC,KAA3C;AACA,wBAAO,oBAAC,iBAAD;AAAmB,MAAA,IAAI,EAAE;AAAEH,QAAAA,SAAF;AAAaC,QAAAA;AAAb;AAAzB,OAAiDC,MAAjD,EAAP;AACD;;AAJD;AAOF;AACA;AACA;;AACA,MAAME,iBAAiB,GAAGR,sBAAsB,CAC9C,wBAD8C,CAAhD;AAIA;AACA;AACA;;AACA,OAAO,MAAMS,cAAN,SAA6BV,SAA7B,CAGL;AACAI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,GAAb;AAAkB,SAAGC;AAArB,QAAgC,KAAKC,KAA3C;AACA,wBAAO,oBAAC,iBAAD;AAAmB,MAAA,IAAI,EAAE;AAAEH,QAAAA,SAAF;AAAaC,QAAAA;AAAb;AAAzB,OAAiDC,MAAjD,EAAP;AACD;;AAJD","sourcesContent":["import React, { Component } from 'react';\nimport { requireNativeComponent, ViewProps } from 'react-native';\n\nimport type { VideoMirrorMode, VideoRenderMode } from './Enums';\n\n/**\n * Properties of the uid.\n */\nexport interface RtcUidProps {\n  /** User ID. */\n  uid: number;\n}\n\n/**\n * Properties of the SurfaceView.\n */\nexport interface RtcSurfaceViewProps {\n  /**\n   * Controls whether the SurfaceView's surface is placed on top of another\n   * regular surface view in the window (but still behind the window itself).\n   */\n  zOrderMediaOverlay?: boolean;\n  /**\n   * Controls whether the SurfaceView's surface is placed on top of its window.\n   */\n  zOrderOnTop?: boolean;\n  /**\n   * The rendering mode of the video view.\n   */\n  renderMode?: VideoRenderMode;\n  /**\n   * The unique channel name for the AgoraRTC session in the string format.\n   * The string length must be less than 64 bytes. Supported character scopes are:\n   * - All lowercase English letters: a to z.\n   * - All uppercase English letters: A to Z.\n   * - All numeric characters: 0 to 9.\n   * - The space character.\n   * - Punctuation characters and other symbols, including: \"!\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"+\", \"-\", \":\", \";\", \"<\", \"=\", \".\", \">\", \"?\", \"@\", \"[\", \"]\", \"^\", \"_\", \" {\", \"}\", \"|\", \"~\", \",\".\n   *\n   * **Note**\n   * - The default value is the empty string \"\". Use the default value if the user joins the channel using the [`joinChannel`]{@link RtcEngine.joinChannel} method in the `RtcEngine` class.\n   * - If the user joins the channel using the [`joinChannel`]{@link RtcChannel.joinChannel} method in the `RtcChannel` class, set this parameter as the `channelId` of the `RtcChannel` object.\n   */\n  channelId?: string;\n  /** The video mirror mode. */\n  mirrorMode?: VideoMirrorMode;\n}\n\n/**\n * Properties of the TextureView.\n */\nexport interface RtcTextureViewProps {\n  /**\n   * The rendering mode of the video view.\n   */\n  renderMode?: VideoRenderMode;\n  /**\n   * The unique channel name for the AgoraRTC session in the string format.\n   * The string length must be less than 64 bytes. Supported character scopes are:\n   * - All lowercase English letters: a to z.\n   * - All uppercase English letters: A to Z.\n   * - All numeric characters: 0 to 9.\n   * - The space character.\n   * - Punctuation characters and other symbols, including: \"!\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"+\", \"-\", \":\", \";\", \"<\", \"=\", \".\", \">\", \"?\", \"@\", \"[\", \"]\", \"^\", \"_\", \" {\", \"}\", \"|\", \"~\", \",\".\n   *\n   * **Note**\n   * - The default value is the empty string \"\". Use the default value if the user joins the channel using the [`joinChannel`]{@link RtcEngine.joinChannel} method in the `RtcEngine` class.\n   * - If the user joins the channel using the [`joinChannel`]{@link RtcChannel.joinChannel} method in the `RtcChannel` class, set this parameter as the `channelId` of the `RtcChannel` object.\n   */\n  channelId?: string;\n  /** The video mirror mode. */\n  mirrorMode?: VideoMirrorMode;\n}\n\ninterface RtcRenderViewProps {\n  data: { channelId?: string; uid: number };\n}\n\n/**\n * @ignore\n */\nconst RCTRtcSurfaceView = requireNativeComponent<RtcRenderViewProps>(\n  'RCTAgoraRtcSurfaceView'\n);\n\n/**\n * @ignore\n */\nexport class RtcSurfaceView extends Component<\n  ViewProps & RtcSurfaceViewProps & RtcUidProps,\n  {}\n> {\n  render() {\n    const { channelId, uid, ...others } = this.props;\n    return <RCTRtcSurfaceView data={{ channelId, uid }} {...others} />;\n  }\n}\n\n/**\n * @ignore\n */\nconst RCTRtcTextureView = requireNativeComponent<RtcRenderViewProps>(\n  'RCTAgoraRtcTextureView'\n);\n\n/**\n * @ignore\n */\nexport class RtcTextureView extends Component<\n  ViewProps & RtcTextureViewProps & RtcUidProps,\n  {}\n> {\n  render() {\n    const { channelId, uid, ...others } = this.props;\n    return <RCTRtcTextureView data={{ channelId, uid }} {...others} />;\n  }\n}\n"]}